{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","scripts/config.js","components/Teleoperation.jsx","components/Connection.jsx","components/RobotState.jsx","components/Map.jsx","components/Home.jsx","components/About.jsx","components/Body.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Container","Navbar","bg","expand","Brand","href","Toggle","Collapse","id","Nav","className","Link","Component","Footer","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","RECONNECTION_TIMER","CMD_VEL_TOPIC","POSE_TOPIC","POSE_MSG_TYPE","ODOM_TOPIC","ODOM_MSG_TYPE","Teleoperation","state","ros","init_connection","handleMove","bind","handleStop","this","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","error","event","cmd_vel","Topic","name","messageType","twist","Message","linear","x","y","z","angular","publish","size","baseColor","stickColor","move","stop","Connection","Alert","variant","RobotState","orientation","linear_velocity","angular_velocity","getRobotState","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","ros_orientation_quaternion","q","Three","w","setFromQuaternion","Math","PI","Row","Col","Map","view_map","viewer","ROS2D","Viewer","divID","width","height","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","Home","About","Body","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bd116e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <Container>\n        <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/about\">About</Nav.Link>\n            \n          </Nav>\n          </Navbar.Collapse>\n        </Container>\n        </Navbar>   \n      </Container>    \n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport {Container } from \"react-bootstrap\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <Container className=\"text-center\">\n        <h1>Dietrich Kruse &copy; 2021</h1>\n      </Container>  \n    );\n  }\n}\n\nexport default Footer;","const Config = {\n    ROSBRIDGE_SERVER_IP: \"192.168.86.129\",\n    ROSBRIDGE_SERVER_PORT: \"9090\",\n    RECONNECTION_TIMER: 3000,\n    CMD_VEL_TOPIC: \"/cmd_vel\",\n    POSE_TOPIC: \"/amcl_pose\",\n    POSE_MSG_TYPE: \"geometry_msgs/PoseWithCovarianceStamped\",\n    ODOM_TOPIC: \"/odom\",\n    ODOM_MSG_TYPE: \"nav_msgs/Odometry\"\n\n};\n\nexport default Config;","import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\n\n\nclass Teleoperation extends Component {\n\n  //redefine ros state from Connection.jsx, \n  //Future work: Redux would allow for sharing of states between components.\n  state = { ros: null }\n\n  constructor() {\n    super()\n    this.init_connection();\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleop!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" + \n            Config.ROSBRIDGE_SERVER_PORT + \n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\")\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" + \n        Config.ROSBRIDGE_SERVER_PORT + \n        \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\")\n    }\n\n  }\n    \n  handleMove(event) {\n    console.log(\"handle move\");\n    //create ROS publisher on topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n\n    //create twist message to publish to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      }, \n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      }\n    });\n    //publish message on cmd_vel\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n\n    //create ROS publisher on topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n\n    //create twist message to publish to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      }, \n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      }\n    });\n    //publish message on cmd_vel\n    cmd_vel.publish(twist);\n  }\n\n  render() { \n    return ( \n      <div>\n        <Joystick\n          size={100} \n          baseColor=\"#EEEEEE\" \n          stickColor=\"#BBBBBB\" \n          move={this.handleMove} \n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n     );\n  }\n}\n \nexport default Teleoperation;","import React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\nimport Teleoperation from './Teleoperation';\n\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super()\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" + \n            Config.ROSBRIDGE_SERVER_PORT + \n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\")\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" + \n        Config.ROSBRIDGE_SERVER_PORT + \n        \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\")\n    }\n\n  }\n\n  render() { \n    return (\n      <Alert className=\"text-center m-3\"\n      variant={this.state.connected? \"success\": \"danger\"}>\n        {this.state.connected? \"Robot Connected\": \"Robot Disconnected\"}\n      </Alert>\n    );\n  }\n}\n \nexport default Connection;","import React, { Component } from 'react';\nimport { Row, Col, Container, Button } from 'react-bootstrap';\nimport Config from '../scripts/config';\nimport * as Three from 'three';\n\nclass RobotState extends Component {\n  state = { \n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0\n  };\n\n  constructor() {\n    super()\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" + \n            Config.ROSBRIDGE_SERVER_PORT + \n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\")\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" + \n        Config.ROSBRIDGE_SERVER_PORT + \n        \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\")\n    }\n\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n  getRobotState() {\n    //Creates a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: Config.POSE_MSG_TYPE\n    });\n\n    //Create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({x: message.pose.pose.position.x.toFixed(2)})\n      this.setState({y: message.pose.pose.position.y.toFixed(2)})\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      })\n    });\n\n    //create subscriber for velocities in odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: Config.ODOM_MSG_TYPE\n    });\n\n    //Create a velocity callback\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n         linear_velocity: message.twist.twist.linear.x.toFixed(2)\n      });\n      this.setState({\n         angular_velocity: message.twist.twist.angular.z.toFixed(2)\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n\n    //convert this quaternion into Roll, Pitch, and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n  render() { \n    return ( \n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n              <p className=\"mt-0\">x: {this.state.x}</p>\n              <p className=\"mt-0\">y: {this.state.y}</p>\n              <p className=\"mt-0\">\n                Orientation: {this.state.orientation}\n              </p>\n          </Col>\n        </Row>\n        <Row>\n        <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n              <p className=\"mt-0\">\n                Linear Velocity: {this.state.linear_velocity}\n              </p>\n              <p className=\"mt-0\">\n                Angular Velocity: {this.state.angular_velocity}\n              </p>\n          </Col>\n        </Row>\n      </div>\n     );\n  }\n}\n \nexport default RobotState;","import React, { Component } from 'react';\nimport Config from '../scripts/config';\n\nclass Map extends Component {\n  state = { \n    ros: null\n  }\n\n  constructor() {\n    super();\n    this.view_map = this.view_map.bind(this)\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" + \n            Config.ROSBRIDGE_SERVER_PORT + \n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\")\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" + \n        Config.ROSBRIDGE_SERVER_PORT + \n        \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\")\n    }\n\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    })\n  }\n\n\n\n  render() { \n    return ( \n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n     );\n  }\n}\n \nexport default Map;","import React, { Component } from 'react';\nimport Connection from './Connection';\nimport RobotState from './RobotState';\nimport Map from './Map';\nimport Teleoperation from './Teleoperation';\nimport { Row, Col, Container, Button } from 'react-bootstrap';\n\n\nclass Home extends Component {\n  state = { \n    \n  };\n\nrender() { \n  return ( \n    <div>\n    <Container>\n      <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n      <Row>\n        <Col>\n          <Connection />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Teleoperation />\n        </Col>    \n      </Row>\n      <Row>\n        <Col>\n          <RobotState />\n        </Col>\n        <Col>\n          <h1>MAP</h1>\n          <Map />\n        </Col>\n      </Row>\n    </Container>\n    </div>\n  );\n  }\n}\n \nexport default Home;","import React, { Component } from 'react';\n\nclass About extends Component {\n  state = {  }\n  render() { \n    return ( \n      <div>\n        <h1>About</h1>\n        <p>This react app controls and monitors ROS-enabled robots through a Web Interface</p>\n      </div>\n    );\n  }\n}\n \nexport default About;","import React, { Component } from 'react';\nimport { Container } from \"react-bootstrap\";\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Home from \"./Home\";\nimport About from \"./About\";\n\nclass Body extends Component {\n  render() {\n    return (\n      <Container>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Route path=\"/about\" exact component={About}></Route>\n          </Switch>\n        </Router>\n      </Container>\n    );\n  }\n}\n\nexport default Body;","import Header from './components/Header';\nimport Footer from \"./components/Footer\";\nimport Body from \"./components/Body\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap/solar-bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}